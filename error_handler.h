/*
 * error_handler.h
 *
 *  Created on: May 28, 2020
 *      Author: Michael OUdshoorn
 */

#ifndef ERROR_HANDLER_H_
#define ERROR_HANDLER_H_

#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>

#include "token.h"
#include "lille_exception.h"

using namespace std;

class error_handler {
private:
	error_handler();									// Construct. No source file listed. Use cin.
	string listing_filename;
	string default_listing_file_name = "LISTING";
	string default_source_file_name = "SOURCE";
	bool listing_required;
	ifstream source_file;
	ofstream listing_file;
	int error_num;
	int error_limit;

	struct error_list {
		int line_no;
		int pos_no;
		int err_no;
		error_list* next;
	};

	error_list* err_list;
	

	static const int max_error_message_index = 150;		// There are 100 error messages that can be generated by the compiler.
	string error_message[max_error_message_index];		// Array with error message
	void initialize_error_messages();					// set up the array of error messages
	void add_error_to_list(int line, int pos, int err);

public:		
	error_handler(string source_file_name);								// Constructor. No listing file needed
	error_handler(string source_file_name, string list_file_name);		// Constructor. Specifies name of listing file

	void flag(int line_number, int pos_on_line, int error_no);			// Error detected by scanner at specified position.
	void flag(token* tok, int error_no);								// Error detected at token tok.
	void set_error_limit(int i);
	void generate_listing();											// Generate a listing file.
	int error_count();													// Number of errors found so far.
};


#endif /* ERROR_HANDLER_H_ */
